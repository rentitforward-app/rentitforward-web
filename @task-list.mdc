# Rent It Forward Web — Task List

Note: This file is superseded by `@DOCUMENTS/MVP-Checklist.mdc` (Last updated: 11/8/2025). Please refer to that checklist for the authoritative MVP status and plans. This document remains for historical context.

Comprehensive, prioritized tasks to bring the web app (Next.js + Supabase + Stripe) to MVP and beyond. Follows the workspace task-list structure and reflects current repo status.

## Completed Tasks

- [x] Supabase SSR auth and route protection
  - `src/middleware.ts` enforces public/protected routes using `@supabase/ssr`
  - `src/lib/supabase/{server.ts,client.ts}` and `src/hooks/use-auth.ts`
- [x] Listings end-to-end (owner + renter flows)
  - Create/edit listing wizard with image compression, Supabase Storage uploads, Google Maps address + coordinates
    - `src/app/listings/create/page.tsx`
  - Listing details with related items and booking entry points
    - `src/app/listings/[id]/page.tsx`
  - Browse with filters, sort (incl. distance), pagination, and location search (Google/Nominatim fallback)
    - `src/app/browse/page.tsx`
  - Owner dashboard for “My Listings” with status management
    - `src/app/listings/page.tsx`
- [x] Bookings dashboard (renter/owner views, status transitions)
  - `src/app/bookings/page.tsx`
- [x] Messaging UI and plumbing
  - `src/app/messages/page.tsx` with conversations/messages queries
  - `src/app/api/conversations/route.ts`
- [x] Notifications foundation
  - In-app notifications screen `src/app/notifications/page.tsx`
  - OneSignal server scaffolding `src/lib/onesignal/*` and API endpoints under `src/app/api/notifications/*`
- [x] Payments back-end surface
  - Stripe Checkout/Intents + webhook handlers present under `src/app/api/payments/**`
  - Connect events handled; escrow/release concepts in place
- [x] Spatial search foundations
  - Supabase migrations: PostGIS + RPC for distance sorting
  - Browse page can consume RPC fallback
- [x] Infra/tooling
  - Tailwind configured; Sentry instrumented; Playwright tests present; Supabase migrations included

## In Progress Tasks

- [ ] Payments E2E wiring (UI → API → Webhook → Booking state)
  - [ ] Pick ONE path and implement to completion:
    - [ ] Stripe Checkout Session flow using `/api/payments/create-session` → redirect to `session.url` → verify via `/api/payments/verify-session`
    - [ ] Or Payment Intents + Elements + manual capture using `src/lib/stripe/payment-authorization.ts` (authorization on request, capture on owner approval)
  - [ ] Update `src/app/payment/[id]/page.tsx` to call chosen API and handle success/failure
  - [ ] Ensure booking statuses are updated consistently (payment_required → confirmed/failed)
  - [ ] Add receipts/confirmation UX and success screen

- [ ] Consolidate Stripe webhook endpoints
  - [ ] Keep a single webhook route (prefer `src/app/api/payments/stripe/webhooks/route.ts`)
  - [ ] Remove/redirect duplicates (e.g., `stripe/webhook/route.ts`)
  - [ ] Reconfigure Stripe dashboard to point to the single webhook URL
  - [ ] Cover events: payment_intent.succeeded/failed, account.updated, transfer.* as required

- [ ] Push notifications (OneSignal) — client integration and RLS
  - [ ] Add client init + service-worker registration for web
  - [ ] Implement player ID capture and persistence via `/api/notifications/player-id`
  - [ ] Fix Supabase RLS/policies to allow notification inserts for expected roles
  - [ ] Re-enable disabled notification writes in admin listing approval flows

- [ ] Search/indexing strategy
  - [ ] Decide: Supabase-only (RPC + filters) vs. Typesense (external)
  - [ ] If Typesense: add indexing scripts + env + client and update UI queries
  - [ ] If Supabase-only: finalize RPC coverage for all filters/sorts and suggestions

- [ ] GraphQL endpoint alignment
  - [ ] Replace placeholder schema in `src/app/api/graphql/route.ts` with real schema/resolvers from `src/lib/graphql/*`
  - [ ] Or remove the route if not used to reduce maintenance surface

- [ ] Design system alignment to shared tokens
  - [ ] Update `tailwind.config.ts` to import from `rentitforward-shared/src/design-system`
  - [ ] Remove local color token duplication in `src/shared/design-system/colors.ts`

- [ ] Environment variables consistency
  - [ ] Standardize base URL env (use `NEXT_PUBLIC_BASE_URL`) and update all callers
  - [ ] Add missing web keys to `.env.template` (e.g., `NEXT_PUBLIC_GOOGLE_MAPS_API_KEY`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `NEXT_PUBLIC_ONESIGNAL_APP_ID`, `ONESIGNAL_API_KEY`)
  - [ ] Audit references (`NEXT_PUBLIC_APP_URL`, `NEXT_PUBLIC_SITE_URL`) and unify

- [ ] Re-enable TS/ESLint for build and fix violations
  - [ ] Set `typescript.ignoreBuildErrors=false` and `eslint.ignoreDuringBuilds=false` in `next.config.js`
  - [ ] Address surfaced type and lint issues

- [ ] Supabase client build-time safety
  - [ ] Remove placeholder URL/keys in `src/lib/supabase/client.ts`
  - [ ] Avoid constructing browser client during build; gate init on `typeof window !== 'undefined'`

- [ ] API consolidation
  - [ ] Remove MCP Stripe price/link routes if not used (`/api/stripe/mcp/*`, `/api/payments/create-checkout`)
  - [ ] Keep only the chosen payment path (Checkout or Intents) and its helpers
  - [ ] Ensure Stripe Connect onboarding flow and capability checks are coherent

- [ ] Policies and RLS
  - [ ] Validate RLS for `messages`, `conversations`, `notifications`, `favorites`, `bookings`
  - [ ] Ensure all client insert/update paths match policies

- [ ] Test coverage (E2E)
  - [ ] Extend Playwright flows to cover: login → create listing → browse → request booking → pay → webhook confirmation → status visible to owner/renter → notifications
  - [ ] Add smoke test for webhook endpoint

- [ ] Documentation updates
  - [ ] Update `DOCUMENTS/PRODUCTION_INTEGRATION_SUMMARY.md` and `SEARCH_API_GUIDE.md` for final payment/search choices

## Future Tasks

- [ ] Owner payout dashboard and manual release tooling (escrow release, transfer auditing)
- [ ] Email notifications (Resend/SendGrid) for booking/payment milestones
- [ ] SEO metadata and Open Graph for listing pages
- [ ] Accessibility pass (WCAG) across primary flows
- [ ] Performance tuning (bundle, images, streaming) and Core Web Vitals polish
- [ ] Analytics/Events instrumentation for funnels (browse → view → request → pay)

## Implementation Plan (High-level)

### 1) Payments E2E
1. Choose flow: Checkout (simpler) or Intents (manual capture). Document choice.
2. Implement UI call from `src/app/payment/[id]/page.tsx` to `/api/payments/create-session` (or Intents path) and redirect/Elements confirm.
3. On success, call `/api/payments/verify-session` (if Checkout) or handle webhook to set booking status.
4. Add success and error pages; notify owner/renter; write tests.

### 2) Webhook consolidation
1. Keep `src/app/api/payments/stripe/webhooks/route.ts`.
2. Remove or redirect `stripe/webhook/route.ts`.
3. Update Stripe dashboard; verify signatures; add tests.

### 3) Notifications
1. Add OneSignal client init + service worker; store player IDs.
2. Fix RLS for notification inserts; re-enable admin notifications in listing approval flows.
3. Add e2e covering notification creation.

### 4) Search
1. Decide search engine (Supabase RPC vs. Typesense).
2. Implement chosen approach end-to-end including suggestions.

### 5) Design tokens
1. Switch `tailwind.config.ts` to import tokens from `rentitforward-shared/src/design-system`.
2. Remove local token duplication.

### 6) Env + QA gates
1. Align env keys and remove duplicates; update `.env.template`.
2. Re-enable TypeScript/ESLint in `next.config.js` and fix issues.

## Relevant Files

- Auth & middleware
  - `src/middleware.ts` — SSR auth gating
  - `src/lib/supabase/{server.ts,client.ts,types.ts}`
  - `src/hooks/use-auth.ts`
- Listings
  - `src/app/listings/create/page.tsx` — create/edit wizard
  - `src/app/listings/[id]/page.tsx` — details + related items
  - `src/app/browse/page.tsx` — filters, sorting, distance
  - `src/app/listings/page.tsx` — owner dashboard
  - `src/app/api/listings/**` — listing APIs
- Bookings
  - `src/app/bookings/page.tsx`
  - `src/app/api/bookings/**`
- Payments
  - `src/app/api/payments/create-session/route.ts`
  - `src/app/api/payments/verify-session/route.ts`
  - `src/app/api/payments/stripe/webhooks/route.ts` (keep)
  - `src/lib/stripe/payment-authorization.ts` (manual capture flow)
  - `src/lib/stripe-payment.ts` (Elements helpers)
  - `src/app/payment/[id]/page.tsx` (UI to wire)
- Messaging
  - `src/app/messages/page.tsx`
  - `src/app/api/conversations/route.ts`
- Notifications
  - `src/app/notifications/page.tsx`
  - `src/lib/onesignal/{config.ts,notifications.ts}`
  - `src/app/api/notifications/**`
- Search/Spatial
  - `supabase/migrations/**` (PostGIS, RPC)
  - `src/app/browse/page.tsx`
- GraphQL
  - `src/lib/graphql/**` (schema/resolvers)
  - `src/app/api/graphql/route.ts` (placeholder handler)
- Config/Infra
  - `tailwind.config.ts` (switch to shared tokens)
  - `.env.template` (add missing keys)
  - `next.config.js` (re-enable TS/ESLint)
  - `DOCUMENTS/**` (docs to update)

## Notes

- OneSignal keys exist in mobile env; ensure web has `NEXT_PUBLIC_ONESIGNAL_APP_ID` and `ONESIGNAL_API_KEY` set (do not commit secrets).
- Prefer a single, consistent payments path; remove abandoned routes.
- Keep RLS aligned with client usage for a smooth e2e experience.

